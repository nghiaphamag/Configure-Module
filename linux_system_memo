9-10/ Heap-Stack ⭐️

1. A tool for statically checking C programs
  > sudo apt-get install splint
  > splint *.c
  
2. efence - Electric Fence Malloc Debugger
  > sudo apt-get install electric-fence
  > gcc -ggdb *.c -lefence
  > ulimit -c unlimited
  > ./a.out
  > gdb a.out core
  
3. Valgrind - a suite of tools for debugging and profiling programs
  > sudo apt-get install valgrind
  > valgrind /.a.out
  
  --------------------------------

13/ Unix file management ⭐️
1. od - dump files in octal and other formats
  > od -c *.txt (c-characters)
2.   

16/ Terminal Devices ⭐️
1. mknod - make block or character special files
  > sudo mknod -m mode_num character_file_name c major mirnor
  > sudo mknod -m 644 char_file c 111 1
  > sudo mknod -m mode_num block_file_name b major mirnor
  > sudo mknod -m 644 blk_file b 222 1
2. system(), tcgetattr(), tcsetattr(), ioctl().

17/ Process (Real, Effective and Saved UserID in Linux) ⭐️
1. Show PPID
  > echo $$
2. getpid(), getppid(), getuid(), geteuid(), getgid(), getegid(), getresuid(), getresgid(), setuid(), setgid(), setresuid(), setresgid().
3. Example id5.c execute without root you must change to root privileged & saved setUID -> sudo chown root:root a.out; sudo chmod +s a.out -> ./a.out
4. fork()

18-19/ Process ⭐️
1. vfork(), wait(), waitpid(), wait3(), wait4().
2. exec() family: l-cmd line with null character(\0) at the end, p-path, v-arguments, e-env
3. getsid(), setsid()
4. If with wait() in parent then child process run first


20/ Daemon Process ⭐️
1. crond: a daemon that executes commands at a scheduled time.
   sshd: the secure shell daemon, which permits logins from remote hosts using a secure communications protocol.
   httpd: the HTTP server daemon (Apache), which server web pages
   xinetd:  the Internet super server daemon, which listens for incoming network connections on specified TCP/IP ports & launches appropriate server programs to handle these connections.
   systemd: system & service manager for Linux OS. When run as first process on boot (as PID 1), it acts as init system that brings up and maintains user space service.(/sbin/init & /bin/systemd are both a softlink to /lib/systemd/systemd).
   	    systemd has replaced the old tradional SYS-V init.

2. nc(1) - netcat
3. systemd.service

21/ Process Scheduling ⭐️
1. Types of processes: 
   - Interractive Process (shell, text editors, graphical app).
   - Batch Process (compiler, database search engines).
   - Real-time Process (multimedia app, robot, collect data from sensor).
   - I/O bound Process (watting on user interactions via key & mouse like text editors)
   - Process-bound Process (spend much of their time executing code like infinite loop, video encoder)
2. Optimization criteria for process scheduler
   - Max CPU utilization [Keep CPU as busy as possible]
   - Fair allocation of CPU.
   - Max throughput [Number of processes that complete their execution per time unit]
   - Min turnaround time [Time taken by a process to finish execution]
   - Min waiting time [Time a process waits in ready queue]
   - Min response time [Time when a process produces first response]

3. renice(1)- alter priority of running processes
   nice(1) - run a program with modified scheduling priority
   schedtool(8) - query and set CPU scheduling parameters
   
4. nice(), getpriority(), setpriority(), sched_get_priority_min(), sched_get_priority_max(), sched_getscheduler(), sched_setscheduler(), sched_getsparam(), sched_setsparam(), sched_yield(), sched_rr_get_interval(), sched_getcpu(), sched_getaffinity(), sched_setaffinity(), 


22/ Shell Utility ⭐️
1. > compgen -b | less (show internal shell cmd)
   > compgen -c | less (show external shell cmd)

23/ Thread ⭐️
1. Way to achieve concurrency
   - Multiple single threaded process: use fork() to create a new process for handling every new task, the child servers the client process, while the parent listens to the new request.
   - Multiple threads within a single process.
   - Single process multiple events: use non-blocking or asynchronous I/O, using select() and poll() system calls.

2. > getconf GNU_LIBC_VERSION
   > getconf GNU_LIBPTHREAD_VERSION
   
3. pthread_create(3) - create a new thread
   pthread_join(3) - join with a terminated thread
   pthread_detach(3) - detach a thread, When a detached thread terminates, its resources are automatically released back to the system.
   pthread_exit(3) - terminate calling thread
   pthread_attr_init(3) - initialize thread attributes object
   pthread_attr_destroy(3) - destroy thread attributes object
   pthread_attr_setdetachstate(3) - set detach state attribute in thread attributes object
   pthread_attr_getdetachstate(3) - get detach state attribute in thread attributes object
   gettid(2) - get thread identification (syscall(SYS_gettid)
   pthread_self(3) - obtain ID of the calling thread
   
   -D_REENTRANT flag to gcc: make errno local to every thread

24-25/ Signal Handlers ⭐️
1. kill(), alarm(), raise(), signal(), sigprocmask() family, sigaction().

26/ Pipes ⭐️
1. pipe(2), pipe2(2), 

27/ FIFO ⭐️
1. mkfifo(1) - make FIFOs (named pipes)
   mknod(1)(2) - make block or character special files

28/ Message Queues ⭐️
1. > ipcs -q : show all of message queue.
   > ipcrm -q msqid : remove message queue

2. Sys-V API: msgget(), msgsed(), msgrcv(), msgctl(), ftok().
   Posix: mq_open(), mq_close(), mq_send(), mq_receive(), mq_getattr(), mq_setattr(), mq_motify().

29/ Shared Memory ⭐️
1. > ipcs -m : show all of shared memory.

2. Sys-V: shmget(), shmat(), shmdt(), shmctl(), ftok().
   Posix: shm_open(), shm_unlink(), mmap(), memcpy().

30/ Memory map ⭐️
1. mmap(2), msync(2), munmap(2), 

31/ Synchronization Among Threads ⭐️
1. pthread_mutex_init(2), pthread_mutex_lock(2), pthread_mutex_unlock(2), pthread_mutex_trylock(2), pthread_mutex_destroy(2), pthread_mutexattr_init(2), pthread_mutexattr_settype(2), pthread_cond_init(), pthread_cond_wait(), pthread_cond_signal(), pthread_cond_broadcast().

2. Condition Variables: Làm thế nào nếu chúng ta muốn thread đợi một điều kiện nào đó xảy ra với dữ liệu trong vùng chia sẻ? Một khi điều kiện được thỏa mãn thì nó sẽ đánh thức thread của chúng ta để nó tiếp tục xử lý. Đó chính là một kiểu cơ chế báo hiệu (signal).

32/ Semaphores ⭐️
1. Posix API: 
    - Named Semaphores: sem_open(), sem_close(), sem_unlink(), sem_wait(), sem_trywait(), sem_post(), sem_getvalue(). 
    - Unamed/Memory based Semaphores: sem_init(), sem_destroy(), sem_wait(), sem_trywait(), sem_post(), sem_getvalue().

33/ TCP/IP Architecture ⭐️
1. > cat /etc/services
   > cat /etc/hosts
   > netstat -antu | grep 22

34/ Socket TCP ⭐️
1. client side: socket(7), connect(), write(), read(), close()
   server side: socket(7), bind(), listen(), accept(), read(), write(), close().
   
2. htons(), inet_aton(), gethostbyname(), inet_ntoa(), getservbyname(), ntohs().
   > curl -v http://url.com
   
35/ Socket UDP ⭐️   
1. client side 2 ways : socket(7), sendto(), recvfrom(), close().
                  or    socket(7), connect(), write(), read(), close()
   server side: socket(7), bind(), recvfrom(), sendto(), close().   
   
37/ Design Of Concurrent Servers ⭐️    
1. Using fork(), pthread_create(), sellect().   
   
38/ Buffer Overflow Vulnerability ⭐️
1. https://github.com/longld/peda
   echo "source ~/peda/peda.py" >> ~/.gdbinit
   
   echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
   sudo apt-get install python-pip
   
   cmd:
   - checksec -- Check for various security options of binary
   - disassemble -- Disassemble a specified section of memory
   - si -- Step one instruction exactly
   - ni -- Next instruction
   - x/x -- Examine memory: x/FMT ADDRESS
   - set
   - print
   - show
   - (b)reak
   - (r)un
   - (c)ontinous

   rsp: stack pointer
   rbp: base/frame pointer
   rip: next instruction pointer
   arguments pass via register (rdi, rsi, rdx, rcx, r8, r9)
   floating point values are pass in (xmm0, xmm1, xmm2, xmm2,...)
   
   sudo apt-get install hexcurse		   
   

⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ Inter-Networking ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️ ⭐️   
   
1/ TCP/IP Configure ⭐️
1. Shell command
   Use to see the IP addr of the gateway  
   > route -n  
   Delete configure eth0
   > ip address flush eth0
   Static configure
   > sudo ifconfig eth0 192.168.1.100 netmask 255.255.255.0 up
   Add gw
   > sudo route add default gw 192.168.1.1 eth0
   
2. Configure file
   Switch dhcp to static/ configure auto / restart
   > vim /etc/network/interfaces
   "auto eth0
    iface eth0 inet static   
    address 192.168.1.100
    netmask 255.255.255.0
    gateway 192.168.1.1"
   
   > ifdown eth0; ifup eth0 
    
   
5-6/ Cryptography Topic ⭐️
	sudo apt-get install openssl libssl-dev

1. Encoding: covert data to another format, using a publicly known algorithm
	example: decimal → binary/octal/hex
				ascii → base64 (A-Z, a-z, 0-9, +, /)
				ascii → utf
				mpeg  → avi
	> echo abcd | base64
	> echo YWJjZAo= | base64 --decode
	
	- iconv - convert text from one character encoding to another
		
	 
2. Hashing: store passwords, ensure data integrity
	(data → hash function → hash value)
	Note: not possible to go back hash value to the data, hash value will be a fixed length string
	
	> echo /etc/shadow | grep neko
	> neko:$6$Q5DZcD.csoIiXdz/$coZyHVqn3lq1qgwJpi1Tqfv0MhTtHSsmdKDBJ.dZ5bVbhYzcsukGQVwycMXYHVG7bSFTixx2QV5xt5ct77OI51:18585:0:99999:7:::
	+ $6: hash function (6 means sha-512)
	+ $Q5DZcD.csoIiXdz/$ : sort value
	
	- Using openssl for hashing with sha512 function (passwd: neko)
	> echo -n 'neko' > f1 
	> open dgsl -sha512 f1
	> python -c 'import crypt; print crypt.crypt("neko", "Q5DZcD.csoIiXdz/")'
	

3. Encryption 
	+ Symmetic: using a single secret key (DES, 3DES, AES,..)
	+ Asymmetic: uses a pair of keys (public keys - private keys) (RSA embedded SSL/TLS)
	
	> echo -e "something" > secret.txt
	Encrytion flow
	 > openssl enc -des -e -a -k 0123abcd -nosalt -iv 0000000 -in secret.txt -out secrest.enc
	 + -e: encryption
	 + -a: base64 format
	 + -k: single key
	 + -iv: initialization vector
	 + -in: input
	 + -out: output
	Decrytion flow
	 > openssl enc -des -d -a -k 0123abcd -nosalt -iv 0000000 -in secret.enc -out secrest.dec
	 + -d: decrytion 
	
4. Digital signature: data integrity, validate authenticily
	- Sender side: Alice
	
	|message| → (encrypt) with public keys of receiver → |cipher|
	|message| → (hasing) → |hash value| → (sign) with private keys of sender → |signature|
	
	- Receiver side: Bob
	|cipher| → (decrypt) with private key of receiver → |received_text|
	
	|received_text|	\→  (verify	 )	with pubic		\→		Yes ?
	|signature|	/→	 (signture)	keys of sender	/→		No ?
	
	hash data then encrypting it with the private keys and receiver site uses public keys of sender for check right/wrong ?(yes/no?)

	> mkdir alice bob
	> cd alice
	> openssl genpkey -algorithm RSA -out pvtkey-A
	> openssl pkey -pubout -in pvtkey-A -out pubkey-A
	> cp pubkey-A ../bob
	
	> cd bob
	> openssl genpkey -algorithm RSA -out pvtkey-B
	> openssl pkey -pubout -in pvtkey-B -out pubkey-B
	> cp pubkey-B ../alice
	
	How to check public/private keys?
	> openssl pkey -in pvtkey-B -text | less
	> openssl pkey -pubin -in pubkey-B -text | less
	
	How to work?
	Sender side (Alice)
	> cd alice
	> echo -e "Dear bob\n" > message
	> openssl pkeyutl -encrypt -pubin -inkey pubkey-B -in message -out cipher
	> openssl dgst -sha512 -sign pvtkey-A -out signature message
	> cp signature cipher ../bob
	
	Receiver side (Bob)
	> cd bob
	> openssl pkeyutl -decrypt -inkey pvtkey-B -in cipher -out received_text
	> openssl dgst -sha512 -verify pubkey-A -signature signature received_text
	
	- +genpkey: generator private key
	- +pubout: generator public key


5. Digital certificater
   
   
7/ SSH ⭐️
	ssh-keygen — OpenSSH authentication key utility
	scp - scure copy

	Server side:   
   > sudo apt-get install openssh-server
   > vi /etc/ssh/sshd_config
   Note: PermitRootLogIn no (if you set 'no' then anyone can't connect with root)
   > adduser admin1  
     	
   Client side:
   > sudo apt-get install openssh-client
   > vi /etc/ssh/ssh_config
   > adduser user1
   > su - user1
   > ssh-keygen -t rsa
   > cd ~/.ssh
   > ssh-copy-id admin1@address
